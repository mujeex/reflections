What happens when you initialize a repository? Why do you need to do it?
	the .git file gets added to the repository, this allows for communication with the  other git components.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

it serves as an intermediary where you store files from the working directory before being added to the repository, it gives us more control and flexibility over the files being commited.

How can you use the staging area to make sure you have one commit per logical
change?
	here, you can make use of the "git diff --staged" command, which checks for the difference between files added to the staging area and the most recent commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

they will really come in handy when you want to make more than a logical change in your file, say maybe, you might want to change the language of your whole project without it affecting the initial project.

How do the diagrams help you visualize the branch structure?

They help in keeping track of the branches created at a point in time without causing a lot of confusion.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

the checked out branch gets merged with the specified branch in the merge command, whereby all the commits of the merged branch gets merged with the checked branch

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

pro
it finds the changes made in a function that exist on both of the branches
cons
it keeps prompting you to figure out the difference in code that was found during the attempt to merge

Manually
Doing so manually allows for better editing of the code before merging, because the computer is not smart enough to figure out the version of the code you are interested in.
